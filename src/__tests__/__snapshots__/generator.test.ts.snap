// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Generator > Many-to-Many Relationships > should generate correct schema for implicit many-to-many relationship 1`] = `
"
import {
  table,
  string,
  boolean,
  number,
  json,
  enumeration,
  relationships,
  createSchema,
  type Row,
} from "@rocicorp/zero";


export const PostTable = table("Post")
  .columns({
    id: number(),
    title: string(),
  })
  .primaryKey("id");

export const CategoryTable = table("Category")
  .columns({
    id: number(),
    name: string(),
  })
  .primaryKey("id");


export const schema = createSchema(
  {
    tables: [
      PostTable,
      CategoryTable,
    ],
  }
);

export type Schema = typeof schema;
export type Post = Row<typeof schema.tables.Post>;
export type Category = Row<typeof schema.tables.Category>;
"
`;

exports[`Generator > Many-to-Many Relationships > should use custom relation name for implicit many-to-many table 1`] = `
"
import {
  table,
  string,
  boolean,
  number,
  json,
  enumeration,
  relationships,
  createSchema,
  type Row,
} from "@rocicorp/zero";


export const PostTable = table("Post")
  .columns({
    id: number(),
    title: string(),
  })
  .primaryKey("id");

export const CategoryTable = table("Category")
  .columns({
    id: number(),
    name: string(),
  })
  .primaryKey("id");

export const _MyCustomRelationTable = table("_MyCustomRelation")
  .columns({
    A: string(),
    B: string(),
  })
  .primaryKey("A", "B");


export const PostTableRelationships = relationships(PostTable, ({ many }) => ({
  categories: many({
    sourceField: ["id"],
    destField: ["B"],
    destSchema: _MyCustomRelationTable,
  }, {
    sourceField: ["A"],
    destField: ["id"],
    destSchema: CategoryTable,
  })
}));

export const CategoryTableRelationships = relationships(CategoryTable, ({ many }) => ({
  posts: many({
    sourceField: ["id"],
    destField: ["A"],
    destSchema: _MyCustomRelationTable,
  }, {
    sourceField: ["B"],
    destField: ["id"],
    destSchema: PostTable,
  })
}));

export const _MyCustomRelationTableRelationships = relationships(_MyCustomRelationTable, ({ one }) => ({
  modelA: one({
    sourceField: ["A"],
    destField: ["id"],
    destSchema: categoryTable,
  }),
  modelB: one({
    sourceField: ["B"],
    destField: ["id"],
    destSchema: postTable,
  })
}));


export const schema = createSchema(
  {
    tables: [
      PostTable,
      CategoryTable,
      _MyCustomRelationTable,
    ],
    relationships: [
      PostTableRelationships,
      CategoryTableRelationships,
      _MyCustomRelationTableRelationships,
    ],
  }
);

export type Schema = typeof schema;
export type Post = Row<typeof schema.tables.Post>;
export type Category = Row<typeof schema.tables.Category>;
export type _MyCustomRelation = Row<typeof schema.tables._MyCustomRelation>;
"
`;

exports[`Generator > Schema Generation > should generate correct schema for basic model 1`] = `
"
import {
  table,
  string,
  boolean,
  number,
  json,
  enumeration,
  relationships,
  createSchema,
  type Row,
} from "@rocicorp/zero";


export const UserTable = table("User")
  .columns({
    id: string(),
    name: string(),
    email: string(),
    age: number().optional(),
  })
  .primaryKey("id");


export const schema = createSchema(
  {
    tables: [
      UserTable,
    ],
  }
);

export type Schema = typeof schema;
export type User = Row<typeof schema.tables.User>;
"
`;

exports[`Generator > Schema Generation > should handle enums as unions correctly 1`] = `
"
import {
  table,
  string,
  boolean,
  number,
  json,
  enumeration,
  relationships,
  createSchema,
  type Row,
} from "@rocicorp/zero";


export type Role = "USER" | "ADMIN";


export const UserTable = table("User")
  .columns({
    id: string(),
    role: enumeration<Role>(),
  })
  .primaryKey("id");


export const schema = createSchema(
  {
    tables: [
      UserTable,
    ],
  }
);

export type Schema = typeof schema;
export type User = Row<typeof schema.tables.User>;
"
`;

exports[`Generator > Schema Generation > should handle enums correctly 1`] = `
"
import {
  table,
  string,
  boolean,
  number,
  json,
  enumeration,
  relationships,
  createSchema,
  type Row,
} from "@rocicorp/zero";


export enum Role {
  USER = "USER",
  ADMIN = "ADMIN",
}


export const UserTable = table("User")
  .columns({
    id: string(),
    role: enumeration<Role>(),
  })
  .primaryKey("id");


export const schema = createSchema(
  {
    tables: [
      UserTable,
    ],
  }
);

export type Schema = typeof schema;
export type User = Row<typeof schema.tables.User>;
"
`;

exports[`Generator > Schema Generation > should handle relationships correctly 1`] = `
"
import {
  table,
  string,
  boolean,
  number,
  json,
  enumeration,
  relationships,
  createSchema,
  type Row,
} from "@rocicorp/zero";


export const UserTable = table("User")
  .columns({
    id: string(),
    name: string(),
  })
  .primaryKey("id");

export const PostTable = table("Post")
  .columns({
    id: string(),
    title: string(),
    userId: string(),
  })
  .primaryKey("id");


export const UserTableRelationships = relationships(UserTable, ({ many }) => ({
  posts: many({
    sourceField: ["id"],
    destField: ["userId"],
    destSchema: PostTable,
  })
}));

export const PostTableRelationships = relationships(PostTable, ({ one }) => ({
  user: one({
    sourceField: ["userId"],
    destField: ["id"],
    destSchema: UserTable,
  })
}));


export const schema = createSchema(
  {
    tables: [
      UserTable,
      PostTable,
    ],
    relationships: [
      UserTableRelationships,
      PostTableRelationships,
    ],
  }
);

export type Schema = typeof schema;
export type User = Row<typeof schema.tables.User>;
export type Post = Row<typeof schema.tables.Post>;
"
`;

exports[`Generator > should handle model mapping with @@map correctly > model @@map test 1`] = `
"
import {
  table,
  string,
  boolean,
  number,
  json,
  enumeration,
  relationships,
  createSchema,
  type Row,
} from "@rocicorp/zero";


export const cdrTable = table("cdr")
  .from("xml_cdr")
  .columns({
    id: number(),
    data: string(),
  })
  .primaryKey("id");


export const schema = createSchema(
  {
    tables: [
      cdrTable,
    ],
  }
);

export type Schema = typeof schema;
export type cdr = Row<typeof schema.tables.cdr>;
"
`;

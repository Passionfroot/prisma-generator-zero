// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Generator > Many-to-Many Relationships > should generate correct schema for implicit many-to-many relationship 1`] = `
"// Generated by Zero Schema Generator

import {
  table,
  string,
  boolean,
  number,
  json,
  enumeration,
  relationships,
  createSchema,
  type Row,
} from "@rocicorp/zero";

// Define tables

export const postTable = table("Post")
  .columns({
    id: number(),
    title: string(),
  })
  .primaryKey("id");

export const categoryTable = table("Category")
  .columns({
    id: number(),
    name: string(),
  })
  .primaryKey("id");

export const _postToCategoryTable = table("_PostToCategory")
  .from("_PostToCategory")
  .columns({
    A: number(),
    B: number(),
  })
  .primaryKey("A", "B");


// Define relationships

export const postTableRelationships = relationships(postTable, ({ many }) => ({
  categories: many({
    sourceField: ["id"],
    destField: ["B"],
    destSchema: _postToCategoryTable,
  }, {
    sourceField: ["A"],
    destField: ["id"],
    destSchema: categoryTable,
  })
}));

export const categoryTableRelationships = relationships(categoryTable, ({ many }) => ({
  posts: many({
    sourceField: ["id"],
    destField: ["A"],
    destSchema: _postToCategoryTable,
  }, {
    sourceField: ["B"],
    destField: ["id"],
    destSchema: postTable,
  })
}));

export const _postToCategoryTableRelationships = relationships(_postToCategoryTable, ({ one }) => ({
  modelA: one({
    sourceField: ["A"],
    destField: ["id"],
    destSchema: categoryTable,
  }),
  modelB: one({
    sourceField: ["B"],
    destField: ["id"],
    destSchema: postTable,
  })
}));

// Define schema

export const schema = createSchema(
  {
    tables: [
      postTable,
      categoryTable,
      _postToCategoryTable,
    ],
    relationships: [
      postTableRelationships,
      categoryTableRelationships,
      _postToCategoryTableRelationships,
    ],
  }
);

// Define types
export type Schema = typeof schema;
export type Post = Row<typeof schema.tables.Post>;
export type Category = Row<typeof schema.tables.Category>;
export type _PostToCategory = Row<typeof schema.tables._PostToCategory>;
"
`;

exports[`Generator > Many-to-Many Relationships > should handle array fields correctly 1`] = `
"// Generated by Zero Schema Generator

import {
  table,
  string,
  boolean,
  number,
  json,
  enumeration,
  relationships,
  createSchema,
  type Row,
} from "@rocicorp/zero";

// Define tables

export const userTable = table("User")
  .columns({
    id: string(),
    email: string(),
    tags: json<string[]>(),
    scores: json<number[]>().optional(),
    features: json<any[]>(),
  })
  .primaryKey("id");

// Define schema

export const schema = createSchema(
  {
    tables: [
      userTable,
    ],
  }
);

// Define types
export type Schema = typeof schema;
export type User = Row<typeof schema.tables.User>;
"
`;

exports[`Generator > Many-to-Many Relationships > should handle array fields with enums correctly 1`] = `
"// Generated by Zero Schema Generator

import {
  table,
  string,
  boolean,
  number,
  json,
  enumeration,
  relationships,
  createSchema,
  type Row,
} from "@rocicorp/zero";

// Define enums

export enum Status {
  ACTIVE = "ACTIVE",
  INACTIVE = "INACTIVE",
  PENDING = "PENDING",
}

// Define tables

export const productTable = table("Product")
  .columns({
    id: string(),
    name: string(),
    statuses: json<Status[]>(),
  })
  .primaryKey("id");

// Define schema

export const schema = createSchema(
  {
    tables: [
      productTable,
    ],
  }
);

// Define types
export type Schema = typeof schema;
export type Product = Row<typeof schema.tables.Product>;
"
`;

exports[`Generator > Many-to-Many Relationships > should use custom relation name for implicit many-to-many table 1`] = `
"// Generated by Zero Schema Generator

import {
  table,
  string,
  boolean,
  number,
  json,
  enumeration,
  relationships,
  createSchema,
  type Row,
} from "@rocicorp/zero";

// Define tables

export const postTable = table("Post")
  .columns({
    id: number(),
    title: string(),
  })
  .primaryKey("id");

export const categoryTable = table("Category")
  .columns({
    id: number(),
    name: string(),
  })
  .primaryKey("id");

export const _myCustomRelationTable = table("_MyCustomRelation")
  .from("_MyCustomRelation")
  .columns({
    A: number(),
    B: number(),
  })
  .primaryKey("A", "B");


// Define relationships

export const postTableRelationships = relationships(postTable, ({ many }) => ({
  categories: many({
    sourceField: ["id"],
    destField: ["B"],
    destSchema: _myCustomRelationTable,
  }, {
    sourceField: ["A"],
    destField: ["id"],
    destSchema: categoryTable,
  })
}));

export const categoryTableRelationships = relationships(categoryTable, ({ many }) => ({
  posts: many({
    sourceField: ["id"],
    destField: ["A"],
    destSchema: _myCustomRelationTable,
  }, {
    sourceField: ["B"],
    destField: ["id"],
    destSchema: postTable,
  })
}));

export const _myCustomRelationTableRelationships = relationships(_myCustomRelationTable, ({ one }) => ({
  modelA: one({
    sourceField: ["A"],
    destField: ["id"],
    destSchema: categoryTable,
  }),
  modelB: one({
    sourceField: ["B"],
    destField: ["id"],
    destSchema: postTable,
  })
}));

// Define schema

export const schema = createSchema(
  {
    tables: [
      postTable,
      categoryTable,
      _myCustomRelationTable,
    ],
    relationships: [
      postTableRelationships,
      categoryTableRelationships,
      _myCustomRelationTableRelationships,
    ],
  }
);

// Define types
export type Schema = typeof schema;
export type Post = Row<typeof schema.tables.Post>;
export type Category = Row<typeof schema.tables.Category>;
export type _MyCustomRelation = Row<typeof schema.tables._MyCustomRelation>;
"
`;

exports[`Generator > Schema Generation > should generate correct schema for basic model 1`] = `
"// Generated by Zero Schema Generator

import {
  table,
  string,
  boolean,
  number,
  json,
  enumeration,
  relationships,
  createSchema,
  type Row,
} from "@rocicorp/zero";

// Define tables

export const userTable = table("User")
  .columns({
    id: string(),
    name: string(),
    email: string(),
    age: number().optional(),
  })
  .primaryKey("id");

// Define schema

export const schema = createSchema(
  {
    tables: [
      userTable,
    ],
  }
);

// Define types
export type Schema = typeof schema;
export type User = Row<typeof schema.tables.User>;
"
`;

exports[`Generator > Schema Generation > should handle enums as unions correctly 1`] = `
"// Generated by Zero Schema Generator

import {
  table,
  string,
  boolean,
  number,
  json,
  enumeration,
  relationships,
  createSchema,
  type Row,
} from "@rocicorp/zero";

// Define enums as unions

export type Role = "USER" | "ADMIN";

// Define tables

export const userTable = table("User")
  .columns({
    id: string(),
    role: enumeration<Role>(),
  })
  .primaryKey("id");

// Define schema

export const schema = createSchema(
  {
    tables: [
      userTable,
    ],
  }
);

// Define types
export type Schema = typeof schema;
export type User = Row<typeof schema.tables.User>;
"
`;

exports[`Generator > Schema Generation > should handle enums correctly 1`] = `
"// Generated by Zero Schema Generator

import {
  table,
  string,
  boolean,
  number,
  json,
  enumeration,
  relationships,
  createSchema,
  type Row,
} from "@rocicorp/zero";

// Define enums

export enum Role {
  USER = "USER",
  ADMIN = "ADMIN",
}

// Define tables

export const userTable = table("User")
  .columns({
    id: string(),
    role: enumeration<Role>(),
  })
  .primaryKey("id");

// Define schema

export const schema = createSchema(
  {
    tables: [
      userTable,
    ],
  }
);

// Define types
export type Schema = typeof schema;
export type User = Row<typeof schema.tables.User>;
"
`;

exports[`Generator > Schema Generation > should handle relationships correctly 1`] = `
"// Generated by Zero Schema Generator

import {
  table,
  string,
  boolean,
  number,
  json,
  enumeration,
  relationships,
  createSchema,
  type Row,
} from "@rocicorp/zero";

// Define tables

export const userTable = table("User")
  .columns({
    id: string(),
    name: string(),
  })
  .primaryKey("id");

export const postTable = table("Post")
  .columns({
    id: string(),
    title: string(),
    userId: string(),
  })
  .primaryKey("id");


// Define relationships

export const userTableRelationships = relationships(userTable, ({ many }) => ({
  posts: many({
    sourceField: ["id"],
    destField: ["userId"],
    destSchema: postTable,
  })
}));

export const postTableRelationships = relationships(postTable, ({ one }) => ({
  user: one({
    sourceField: ["userId"],
    destField: ["id"],
    destSchema: userTable,
  })
}));

// Define schema

export const schema = createSchema(
  {
    tables: [
      userTable,
      postTable,
    ],
    relationships: [
      userTableRelationships,
      postTableRelationships,
    ],
  }
);

// Define types
export type Schema = typeof schema;
export type User = Row<typeof schema.tables.User>;
export type Post = Row<typeof schema.tables.Post>;
"
`;

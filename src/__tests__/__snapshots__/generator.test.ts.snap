// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Generator > Many-to-Many Relationships > should generate correct schema for implicit many-to-many relationship 1`] = `
"// Generated by Zero Schema Generator

import {
  table,
  string,
  boolean,
  number,
  json,
  enumeration,
  relationships,
  createSchema,
  Row,
} from "@rocicorp/zero";

// Define tables

export const postTable = table("Post")
  .columns({
    id: number(),
    title: string(),
    categories: string(),
  })
  .primaryKey("id");

export const categoryTable = table("Category")
  .columns({
    id: number(),
    name: string(),
    posts: string(),
  })
  .primaryKey("id");

// Define schema

export const schema = createSchema(
  1,
  {
    tables: [
      postTable,
      categoryTable,
    ],
  }
);

// Define types
export type Schema = typeof schema;
export type Post = Row<typeof schema.tables.Post>;
export type Category = Row<typeof schema.tables.Category>;

// DO NOT TOUCH THIS. The schema hash is used to determine if the schema has changed and correctly update the version.
// Schema hash: ebf739489923347cdfa58bc43b4f1aa9141f863e93ee48af05055d1a675314e9
"
`;

exports[`Generator > Many-to-Many Relationships > should use custom relation name for implicit many-to-many table 1`] = `
"// Generated by Zero Schema Generator

import {
  table,
  string,
  boolean,
  number,
  json,
  enumeration,
  relationships,
  createSchema,
  Row,
} from "@rocicorp/zero";

// Define tables

export const postTable = table("Post")
  .columns({
    id: number(),
    title: string(),
  })
  .primaryKey("id");

export const categoryTable = table("Category")
  .columns({
    id: number(),
    name: string(),
  })
  .primaryKey("id");

export const _MyCustomRelationTable = table("_MyCustomRelation")
  .columns({
    A: string(),
    B: string(),
  })
  .primaryKey("A", "B");


// Define relationships

export const postTableRelationships = relationships(postTable, ({ many }) => ({
  categories: many({
    sourceField: ["id"],
    destField: ["B"],
    destSchema: _MyCustomRelationTable,
  }, {
    sourceField: ["A"],
    destField: ["id"],
    destSchema: categoryTable,
  })
}));

export const categoryTableRelationships = relationships(categoryTable, ({ many }) => ({
  posts: many({
    sourceField: ["id"],
    destField: ["A"],
    destSchema: _MyCustomRelationTable,
  }, {
    sourceField: ["B"],
    destField: ["id"],
    destSchema: postTable,
  })
}));

export const _MyCustomRelationTableRelationships = relationships(_MyCustomRelationTable, ({ one }) => ({
  modelA: one({
    sourceField: ["A"],
    destField: ["id"],
    destSchema: categoryTable,
  }),
  modelB: one({
    sourceField: ["B"],
    destField: ["id"],
    destSchema: postTable,
  })
}));

// Define schema

export const schema = createSchema(
  1,
  {
    tables: [
      postTable,
      categoryTable,
      _MyCustomRelationTable,
    ],
    relationships: [
      postTableRelationships,
      categoryTableRelationships,
      _MyCustomRelationTableRelationships,
    ],
  }
);

// Define types
export type Schema = typeof schema;
export type Post = Row<typeof schema.tables.Post>;
export type Category = Row<typeof schema.tables.Category>;
export type _MyCustomRelation = Row<typeof schema.tables._MyCustomRelation>;

// DO NOT TOUCH THIS. The schema hash is used to determine if the schema has changed and correctly update the version.
// Schema hash: 844ac5b4c390f0f72a6338888bd4469f8c1bb0602b5ebe6c4411ec8cc768a399
"
`;

exports[`Generator > Schema Generation > should generate correct schema for basic model 1`] = `
"// Generated by Zero Schema Generator

import {
  table,
  string,
  boolean,
  number,
  json,
  enumeration,
  relationships,
  createSchema,
  Row,
} from "@rocicorp/zero";

// Define tables

export const userTable = table("User")
  .columns({
    id: string(),
    name: string(),
    email: string(),
    age: number().optional(),
  })
  .primaryKey("id");

// Define schema

export const schema = createSchema(
  1,
  {
    tables: [
      userTable,
    ],
  }
);

// Define types
export type Schema = typeof schema;
export type User = Row<typeof schema.tables.User>;

// DO NOT TOUCH THIS. The schema hash is used to determine if the schema has changed and correctly update the version.
// Schema hash: 0010b112e23e9471e565616609729ed91148ba7141e1232388976164dd1dec26
"
`;

exports[`Generator > Schema Generation > should handle enums correctly 1`] = `
"// Generated by Zero Schema Generator

import {
  table,
  string,
  boolean,
  number,
  json,
  enumeration,
  relationships,
  createSchema,
  Row,
} from "@rocicorp/zero";

// Define enums

export enum Role {
  USER = "USER",
  ADMIN = "ADMIN",
}

// Define tables

export const userTable = table("User")
  .columns({
    id: string(),
    role: enumeration<Role>(),
  })
  .primaryKey("id");

// Define schema

export const schema = createSchema(
  1,
  {
    tables: [
      userTable,
    ],
  }
);

// Define types
export type Schema = typeof schema;
export type User = Row<typeof schema.tables.User>;

// DO NOT TOUCH THIS. The schema hash is used to determine if the schema has changed and correctly update the version.
// Schema hash: b9a9a68f5a33016c062f5b4984d17cb4147f177ccf6a9be1c7dcf49bff9f69b6
"
`;

exports[`Generator > Schema Generation > should handle relationships correctly 1`] = `
"// Generated by Zero Schema Generator

import {
  table,
  string,
  boolean,
  number,
  json,
  enumeration,
  relationships,
  createSchema,
  Row,
} from "@rocicorp/zero";

// Define tables

export const userTable = table("User")
  .columns({
    id: string(),
    name: string(),
  })
  .primaryKey("id");

export const postTable = table("Post")
  .columns({
    id: string(),
    title: string(),
    userId: string(),
  })
  .primaryKey("id");


// Define relationships

export const userTableRelationships = relationships(userTable, ({ many }) => ({
  posts: many({
    sourceField: ["id"],
    destField: ["userId"],
    destSchema: postTable,
  })
}));

export const postTableRelationships = relationships(postTable, ({ one }) => ({
  user: one({
    sourceField: ["userId"],
    destField: ["id"],
    destSchema: userTable,
  })
}));

// Define schema

export const schema = createSchema(
  1,
  {
    tables: [
      userTable,
      postTable,
    ],
    relationships: [
      userTableRelationships,
      postTableRelationships,
    ],
  }
);

// Define types
export type Schema = typeof schema;
export type User = Row<typeof schema.tables.User>;
export type Post = Row<typeof schema.tables.Post>;

// DO NOT TOUCH THIS. The schema hash is used to determine if the schema has changed and correctly update the version.
// Schema hash: e8145ed27becf8118560ddf0a7d341f3d2cf3bf785bbea98a670ba3da4035b4b
"
`;

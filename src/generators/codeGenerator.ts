import { DMMF } from "@prisma/generator-helper"
import { TransformedSchema, ZeroModel, ZeroTypeMapping } from "../types"

function generateImports(): string {
  return `import {
  table,
  string,
  boolean,
  number,
  json,
  enumeration,
  relationships,
  createSchema,
  type Row,
} from "@rocicorp/zero";\n\n`
}

function generateEnums(schema: TransformedSchema): string {
  if (schema.enums.length === 0) return ""

  let output = "// Define enums\n\n"
  schema.enums.forEach((enumType) => {
    output += `export enum ${enumType.name} {\n`
    enumType.values.forEach((value) => {
      const enumValue = value.dbName || value.name
      output += `  ${value.name} = "${enumValue}",\n`
    })
    output += "}\n\n"
  })

  return output
}

function generateColumnDefinition(
  name: string,
  mapping: ZeroTypeMapping,
): string {
  const typeStr = mapping.isOptional
    ? `${mapping.type}.optional()`
    : mapping.type
  return `    ${name}: ${typeStr}`
}

function generateModelSchema(model: ZeroModel): string {
  let output = `export const ${model.zeroTableName} = table("${model.tableName}")\n`
  output += "  .columns({\n"

  Object.entries(model.columns).forEach(([name, mapping]) => {
    output += generateColumnDefinition(name, mapping) + ",\n"
  })

  output += "  })"

  // Add primary key
  output += `\n  .primaryKey(${model.primaryKey.map((key) => `"${key}"`).join(", ")});\n\n`
  return output
}

function generateRelationships(models: ZeroModel[]): string {
  const modelRelationships = models
    .filter(
      (model) =>
        model.relationships && Object.keys(model.relationships).length > 0,
    )
    .map((model) => {
      const relationshipEntries = Object.entries(model.relationships || {})
      const hasOneRelation = relationshipEntries.some(
        ([, rel]) => rel.type === "one",
      )
      const hasManyRelation = relationshipEntries.some(
        ([, rel]) => rel.type === "many",
      )

      const relationshipImports = []
      if (hasOneRelation) relationshipImports.push("one")
      if (hasManyRelation) relationshipImports.push("many")

      const relationshipsStr = relationshipEntries
        .map(([name, rel]) => {
          return `  ${name}: ${rel.type}({
    sourceField: ${JSON.stringify(rel.sourceField)},
    destField: ${JSON.stringify(rel.destField)},
    destSchema: ${rel.destSchema},
  })`
        })
        .join(",\n")

      return `export const ${model.zeroTableName}Relationships = relationships(${model.zeroTableName}, ({ ${relationshipImports.join(", ")} }) => ({
${relationshipsStr}
}));\n\n`
    })

  return modelRelationships.length > 0
    ? "\n// Define relationships\n\n" + modelRelationships.join("\n")
    : ""
}

function generateSchema(schema: TransformedSchema): string {
  let output = "// Define schema\n\n"
  output += "export const schema = createSchema(\n"
  output += `  ${schema.version},\n`
  output += "  {\n"
  output += "    tables: [\n"
  schema.models.forEach((model) => {
    output += `      ${model.zeroTableName},\n`
  })
  output += "    ],\n"

  // Add relationships to schema if any exist
  const hasRelationships = schema.models.some(
    (model) =>
      model.relationships && Object.keys(model.relationships).length > 0,
  )

  if (hasRelationships) {
    output += "    relationships: [\n"
    schema.models.forEach((model) => {
      if (model.relationships && Object.keys(model.relationships).length > 0) {
        output += `      ${model.zeroTableName}Relationships,\n`
      }
    })
    output += "    ],\n"
  }

  output += "  }\n"
  output += ");\n\n"

  // Add types
  output += "// Define types\n"
  output += "export type Schema = typeof schema;\n"
  schema.models.forEach((model) => {
    output += `export type ${model.modelName} = Row<typeof schema.tables.${model.tableName}>;\n`
  })

  return output
}

export function generateCode(schema: TransformedSchema): string {
  let output = "// Generated by Zero Schema Generator\n\n"

  // Add imports
  output += generateImports()

  // Add enums
  output += generateEnums(schema)

  // Add models
  output += "// Define tables\n\n"
  schema.models.forEach((model) => {
    output += generateModelSchema(model)
  })

  // Add relationships
  output += generateRelationships(schema.models)

  // Add schema
  output += generateSchema(schema)

  // Add hash comment
  output +=
    "\n// DO NOT TOUCH THIS. The schema hash is used to determine if the schema has changed and correctly update the version.\n"
  output += `// Schema hash: ${schema.hash}\n`

  return output
}
